// Code generated by mockery v2.5.1. DO NOT EDIT.

package builder

import (
	template "github.com/caioeverest/vulcan/pkg/template"
	mock "github.com/stretchr/testify/mock"
)

// MockBuilder is an autogenerated mock type for the Builder type
type MockBuilder struct {
	mock.Mock
}

// AbsolutePath provides a mock function with given fields:
func (_m *MockBuilder) AbsolutePath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Build provides a mock function with given fields:
func (_m *MockBuilder) Build() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clean provides a mock function with given fields:
func (_m *MockBuilder) Clean() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Prepare provides a mock function with given fields:
func (_m *MockBuilder) Prepare() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Project provides a mock function with given fields:
func (_m *MockBuilder) Project() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Templates provides a mock function with given fields:
func (_m *MockBuilder) Templates() []template.Template {
	ret := _m.Called()

	var r0 []template.Template
	if rf, ok := ret.Get(0).(func() []template.Template); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]template.Template)
		}
	}

	return r0
}
